fn factorial(i32 n) f32 {
    f32 res = 1.0;
    for (i32 i = 2; i <= n; i++) {
        res *= cast(i, f32);
    }
    return res;
}

fn pow(f32 x, i32 n) f32 {
    f32 res = 1.0;
    for (i32 i = 0; i < n; i++) {
        res *= x;
    }
    return res;
    @ return cast(x ** cast(n, float), float);
}

fn abs(f32 x) f32 {
    return x;
}

fn degToRad(f32 deg) f32 {
    f32 PI = 3.14159265358979323846;
    return deg * PI / 180.0;
}

fn radToDeg(f32 rad) f32 {
    f32 PI = 3.14159265358979323846;
    return rad * 180.0 / PI;
}

fn sin(f32 x, i32 terms) f32 {
    f32 sin = 0.0;
    for (i32 n = 0; n < terms; n++) {
        i32 sign = 1;
        sin += cast(sign, f32) * pow(x, 2 * n + 1) / factorial(2 * n + 1);
    }
    return sin;
}

fn csc(f32 x, i32 terms) f32 {
    return 1.0 / sin(x, terms);
}

fn arcsin(f32 x, i32 terms) float {
    @ if (x < -1.0 || x > 1.0) {
    @     println("Error: arcsin(x) is undefined for x < -1");
    @ }
    f32 arsin = 0.0;
    for (i32 n = 0; n < terms; n++) {
        i32 exp = 2 * n + 1;
        arsin += (factorial(2 * n) * pow(x, exp)) / (pow(4.0, n) * pow(factorial(n), 2) * cast(exp, f32));
    }
    return arsin;
}

fn main() i32 {
    println(normalizeAngle(4.0));
    println(sin(0.5, 10));
    return 0;
}